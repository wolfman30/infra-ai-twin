name: OIDC Smoke Test

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  assume:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug OIDC token claims
        uses: actions/github-script@v6
        with:
          script: |
            function decodeClaims(token) {
              const [, payload] = token.split('.')
              const normalized = payload.replace(/-/g, '+').replace(/_/g, '/')
              const padding = (4 - (normalized.length % 4)) % 4
              const padded = normalized.padEnd(normalized.length + padding, '=')
              return JSON.parse(Buffer.from(padded, 'base64').toString('utf8'))
            }
            const aud = 'sts.amazonaws.com'
            const token = await core.getIDToken(aud)
            const claims = decodeClaims(token)
            console.log('OIDC claims:', JSON.stringify({ aud: claims.aud, sub: claims.sub, iss: claims.iss }, null, 2))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::422017356225:role/ai-twin-devops-dev
          aws-region: us-east-2
          role-skip-session-tagging: true

      - name: Who am I
        run: aws sts get-caller-identity

      - name: Manual STS debug (assume with token)
        uses: actions/github-script@v6
        with:
          script: |
            const https = require('https');
            const aud = 'sts.amazonaws.com';
            const roleArn = 'arn:aws:iam::422017356225:role/ai-twin-devops-dev';
            const token = await core.getIDToken(aud);

            const params = new URLSearchParams({
              Action: 'AssumeRoleWithWebIdentity',
              Version: '2011-06-15',
              RoleArn: roleArn,
              RoleSessionName: 'OidcSmokeDebug',
              WebIdentityToken: token,
              DurationSeconds: '900'
            });

            await new Promise((resolve) => {
              const req = https.request({
                method: 'POST',
                hostname: 'sts.amazonaws.com',
                path: '/',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
              }, (res) => {
                let data = '';
                res.on('data', (c) => data += c);
                res.on('end', () => {
                  if (res.statusCode === 200) {
                    core.info('Manual STS assume succeeded.');
                  } else {
                    const msg = data.match(/<Message>([^<]+)<\/Message>/)?.[1];
                    const encoded = data.match(/<EncodedMessage>([^<]+)<\/EncodedMessage>/)?.[1];
                    core.info(`Manual STS assume failed: ${msg || 'unknown'}`);
                    if (encoded) {
                      try {
                        const decoded = Buffer.from(encoded, 'base64').toString('utf8');
                        core.info(`Decoded detail: ${decoded}`);
                      } catch (e) {
                        core.info('Could not decode EncodedMessage');
                      }
                    } else {
                      core.info(`STS error body: ${data}`);
                    }
                  }
                  resolve();
                });
              });
              req.on('error', (e) => { core.info(`HTTPS error: ${e}`); resolve(); });
              req.write(params.toString());
              req.end();
            });
